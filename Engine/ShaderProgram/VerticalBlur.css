
Texture2D textureInput; // orignal image
RWTexture2D<float4> gOutput; // blurred image

//cbuffer BlurParameters
//{
	//int blurRadius;
	//float sigma;
	//float2 pad;
//};


#define NUMBER_THREAD 256 // number of threads in group

#define MAX_RADIUS 10

#define BLUR_RADIUS 5

groupshared float4 textureValue[NUMBER_THREAD + 2 * BLUR_RADIUS];

float calculateWeigth(int ID)
{

	return exp( -pow(ID, 2) / ( 2 * 1 ) );
}

void calculateWeights(int kernel, out float weights[2 * MAX_RADIUS + 1], int blurRadius)
{
	float totalWeight = 0;
	for	(int i = -blurRadius; i <= blurRadius ; i ++)
	{
		float weight = calculateWeigth(i);
		weights[i + blurRadius] = weight;
		totalWeight += weight;
	}
	for	(int i = 0; i <= 2 * blurRadius ; i ++)
	{
		weights[i] /= totalWeight;
	}
}




[numthreads(1, NUMBER_THREAD, 1)]

void main(int3 groupThreadId: SV_GroupThreadID,
		 int3 dispatchThreadID : SV_DispatchThreadID	)
{
	//Sample texture

	// top most of the thread group sample 2 texture
	if(groupThreadId.y < BLUR_RADIUS) 
	{
		int pixelY = max(dispatchThreadID.y - BLUR_RADIUS, 0);
		textureValue[groupThreadId.y] = textureInput[int2(dispatchThreadID.x, pixelY)];
	}

	if(groupThreadId.y >= NUMBER_THREAD - BLUR_RADIUS) 
	{
		int pixelY = min(dispatchThreadID.y + BLUR_RADIUS, textureInput.Length.y -1);
		textureValue[groupThreadId.y + 2 * BLUR_RADIUS] = textureInput[int2(dispatchThreadID.x, pixelY)];
	}

	// clamp x, y pixel into image size
	textureValue[groupThreadId.y + BLUR_RADIUS] = textureInput[min(dispatchThreadID.xy, textureInput.Length.xy - 1)];
	GroupMemoryBarrierWithGroupSync(); // wait all thread done fetch texture into cache

	//int bR = min(BLUR_RADIUS, MAX_RADIUS);

	float gWeights[11] =
	{
		0.05f, 0.05f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.05f, 0.05f,
	};

	// blur
	float4 blurColor = float4(0.0f, 0.0f, 0.0f, 0.0f);
	for(int i = -BLUR_RADIUS; i <= BLUR_RADIUS; i++)
	{
		int weightID = i + BLUR_RADIUS;
		blurColor += textureValue[groupThreadId.y + weightID] * gWeights[weightID];
	}
	gOutput[dispatchThreadID.xy] = blurColor;


	
	
}